module coeq where
import nat

data colimit (A : nat -> U) (f : (n : nat) -> A n -> A (succ n))
   = inc (n : nat) (x: A n) | com (n : nat) (a: A n) <i> [ (i=0) -> inc (succ n) (f n a), (i=1) -> inc n a]

data coeq (A B: U) (f g: A -> B)
   = inC (_: B) | glueC (a: A) <i> [(i=0) -> inC (f a), (i=1) -> inC (g a) ]

data coeqP (A B: U) (p : A -> (b1 b2: B) * (_: Path B b1 b2) * (Path B b1 b2))
   = inP (b: B) | glueP (a:A) <i> [(i=0) -> inP (((p a).2.2.1) @ 0), (i=1) -> inP (((p a).2.2.2) @ 1) ]

data pushout (A B C: U) (f: C -> A) (g: C -> B)
   = po1 (_: A) | po2 (_: B) | po3 (c: C) <i> [ (i=0) -> po1 (f c), (i=1) -> po2 (g c) ]

data hs (S A: U)
   = base (x: A) | hub (f: S -> hs S A)
   | spoke (f: S -> hs S A) (s:S) <i> [ (i=0) -> hub {hs S A} f @ i, (i=1) -> f s ]
   | hubEq (x y: A) (p: S -> Path A x y) <i> [ (i=0) -> base x , (i=1) -> base y ]
   | spokeEq (x y: A) (p: S -> Path A x y) (s: S) <i> [(i=0)->hubEq {hs S A} x y p @ i, (i=1)->base(p s @ i) ]

